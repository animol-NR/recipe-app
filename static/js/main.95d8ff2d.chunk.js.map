{"version":3,"sources":["recipe.component.jsx","search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","src","alt","parseInt","map","ingredient","index","key","text","SearchBox","search","updateSearch","placeholder","type","value","onChange","App","useState","recipes","setRecipes","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","target","recipe","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iTAGaA,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,YAA3B,OACpB,yBAAKC,UAAU,UACb,wBAAIA,UAAU,gBAAgBJ,GAC9B,yBAAKI,UAAU,aACb,yBAAKA,UAAU,QAAQC,IAAKH,EAAOI,IAAI,MAEzC,uBAAGF,UAAU,YAAb,aAAmCG,SAASN,GAA5C,SACA,4CACA,wBAAIG,UAAU,eACXD,EAAYK,KAAI,SAACC,EAAYC,GAAb,OACf,wBAAIN,UAAU,aAAaO,IAAKD,GAC9B,uBAAGN,UAAU,uBADf,IACwCK,EAAWG,aCX9CC,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAOC,EAAV,EAAUA,aAAaC,EAAvB,EAAuBA,YAAvB,OAExB,6BACI,2BACEC,KAAK,OACLb,UAAU,aACVc,MAAOJ,EACPK,SAAUJ,EACVC,YAAaA,IAEf,4BAAQC,KAAK,SAASb,UAAU,iBAAhC,iBCgDWgB,G,MAvDH,WACV,IADgB,EAKYC,mBAAS,IALrB,mBAKTC,EALS,KAKAC,EALA,OAMUF,mBAAS,IANnB,mBAMTP,EANS,KAMDU,EANC,OAOQH,mBAAS,IAPjB,mBAOTI,EAPS,KAOFC,EAPE,KAShBC,qBAAU,WACJC,MACJ,CAACH,IAEL,IAAMG,EAAU,uCAAC,8BAAAC,EAAA,sEACSC,MAAM,mCAAD,OACUL,EADV,mBAbhB,WAagB,oBAZf,qCAWC,cACPM,EADO,gBAIIA,EAASC,OAJb,OAIPC,EAJO,OAKbV,EAAWU,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANJ,2CAAD,qDAkBhB,OACE,yBAAK9B,UAAU,OACb,4BAAQA,UAAU,UAChB,wBAAIA,UAAU,SAAd,0BACD,0BAAMiC,SAVM,SAAAC,GACfA,EAAEC,iBACFb,EAASZ,GACTU,EAAU,KAOoBpB,UAAU,eACnC,kBAAC,EAAD,CAAWW,aAfE,SAAAuB,GAChBd,EAAUc,EAAEE,OAAOtB,QAcuBF,YAAY,kBAKxD,yBAAKZ,UAAU,WACbkB,EAAQd,KAAI,SAACiC,EAAO/B,GAAR,OACb,kBAAC,EAAD,CACGC,IAAKD,EACLV,MAAOyC,EAAOA,OAAOC,MACrBzC,SAAUwC,EAAOA,OAAOxC,SACxBC,MAAOuC,EAAOA,OAAOvC,MACrBC,YAAasC,EAAOA,OAAOtC,qBC1CbwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.95d8ff2d.chunk.js","sourcesContent":["import React from 'react';\nimport './recipe.styles.css';\n\nexport const Recipe = ({ title, calories, image, ingredients }) => (\n  <div className=\"recipe\">\n    <h1 className=\"recipe_title\">{title}</h1>\n    <div className=\"image_div\">\n      <img className=\"image\" src={image} alt=\"\" />\n    </div>\n    <p className=\"calories\">Calories: {parseInt(calories)} Kcal</p>\n    <h2>Ingredients:</h2>\n    <ul className=\"ingredients\">\n      {ingredients.map((ingredient, index) => (\n        <li className=\"ingredient\" key={index}>\n          <i className=\"fas fa-caret-right\" /> {ingredient.text}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox =({ search,updateSearch,placeholder})=>(\n\n<div>\n    <input\n      type=\"text\"\n      className=\"search-bar\"\n      value={search}\n      onChange={updateSearch}\n      placeholder={placeholder}\n    />\n    <button type=\"submit\" className=\"search-button\">\nSearch    </button>\n  </div>\n);\n\n","import React, { useEffect, useState } from 'react';\nimport {Recipe} from './recipe.component';\nimport {SearchBox} from './search-box.component';\nimport './App.css';\n\n\nconst App = () => {\n  const APP_ID=\"eccf0ea7\";\n  const APP_KEY=\"73bcd8b4ea88c9ce9d7bf3c101901537\";\n\n\n  const [recipes, setRecipes]=useState([]);\n  const [search, setSearch]=useState('');\n  const [query, setQuery]=useState('');\n\n  useEffect(() => {\n        getRecipes();\n  },[query]);\n\nconst getRecipes=async ()=>{\n    const response= await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data=await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\nconst updateSearch= e => {\n    setSearch(e.target.value);\n  };\n\nconst getSearch= e => {\n  e.preventDefault();\n  setQuery(search);\n  setSearch('');\n};\n\nreturn( \n  <div className=\"App\">\n    <header className=\"header\">\n      <h1 className=\"title\">Strange Recipes Finder</h1>\n     <form onSubmit={getSearch} className=\"search-form\">\n       <SearchBox updateSearch={updateSearch} placeholder=\"Recipe Name\"/>\n         {/* <input className=\"search-bar\" type=\"text\" name=\"recipeName\" value={search} onChange={updateSearch} />\n         <button className=\"search-button\" type=\"\">Search</button> */}\n  </form> \n  </header>\n  <div className=\"recipes\">\n   {recipes.map((recipe,index)=>(\n   <Recipe \n      key={index}\n      title={recipe.recipe.label}\n      calories={recipe.recipe.calories}\n      image={recipe.recipe.image}\n      ingredients={recipe.recipe.ingredients}\n/>\n   ))}\n   </div>\n  </div>\n);\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}